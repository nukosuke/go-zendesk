package main

import (
	"fmt"
	"html/template"
	"os"
)

var tpl = `
// Code generated by Script. DO NOT EDIT.
// Source: script/codegen/main.go
//
// Generated by this command:
//
//	go run script/codegen/main.go

package zendesk
{{ if .ExtraParam }}
import (
	"context"
	"fmt"
)
{{ else }}
import "context"
{{ end }}
func (z *Client) Get{{.FuncName}}Iterator(ctx context.Context, opts *PaginationOptions) *Iterator[{{.ObjectName}}] {
	return &Iterator[{{.ObjectName}}]{
		CommonOptions: opts.CommonOptions,
		pageSize:      opts.PageSize,
		hasMore:       true,
		isCBP:         opts.IsCBP,
		pageAfter:     "",
		pageIndex:     1,
		ctx:           ctx,
		obpFunc:       z.Get{{.FuncName}}OBP,
		cbpFunc:       z.Get{{.FuncName}}CBP,
	}
}

func (z *Client) Get{{.FuncName}}OBP(ctx context.Context, opts *OBPOptions) ([]{{.ObjectName}}, Page, error) {
	var data struct {
		{{.ObjectName}}s []{{.ObjectName}} ` + "`json:\"{{.JsonName}}\"`" + `
		Page
	}

	tmp := opts
	if tmp == nil {
		tmp = &OBPOptions{}
	}
	{{ if .ExtraParam }}
	path := fmt.Sprintf("{{.ApiEndpoint}}", tmp.Id)
	u, err := addOptions(path, tmp)
	{{ else }}
	u, err := addOptions("{{.ApiEndpoint}}", tmp)
	{{ end }}
	if err != nil {
		return nil, Page{}, err
	}

	err = getData(z, ctx, u, &data)
	if err != nil {
		return nil, Page{}, err
	}
	return data.{{.ObjectName}}s, data.Page, nil
}

func (z *Client) Get{{.FuncName}}CBP(ctx context.Context, opts *CBPOptions) ([]{{.ObjectName}}, CursorPaginationMeta, error) {
	var data struct {
		{{.ObjectName}}s []{{.ObjectName}} ` + "`json:\"{{.JsonName}}\"`" + `
		Meta    CursorPaginationMeta ` + "`json:\"meta\"`" + `
	}

	tmp := opts
	if tmp == nil {
		tmp = &CBPOptions{}
	}
	{{ if .ExtraParam }}
	path := fmt.Sprintf("{{.ApiEndpoint}}", tmp.Id)
	u, err := addOptions(path, tmp)
	{{ else }}
	u, err := addOptions("{{.ApiEndpoint}}", tmp)
	{{ end }}
	if err != nil {
		return nil, data.Meta, err
	}

	err = getData(z, ctx, u, &data)
	if err != nil {
		return nil, data.Meta, err
	}
	return data.{{.ObjectName}}s, data.Meta, nil
}

`

type FuncTemplateData struct {
	FuncName    string
	ObjectName  string
	ApiEndpoint string
	JsonName    string
	FileName    string
	ExtraParam  bool
}

var funcData []FuncTemplateData = []FuncTemplateData{
	{
		FuncName:    "Automations",
		ObjectName:  "Automation",
		ApiEndpoint: "/automation.json",
		JsonName:    "automations",
		FileName:    "automation",
	},
	{
		FuncName:    "GroupMemberships",
		ObjectName:  "GroupMembership",
		ApiEndpoint: "/group_memberships.json",
		JsonName:    "group_memberships",
		FileName:    "group_membership",
	},
	{
		FuncName:    "Macros",
		ObjectName:  "Macro",
		ApiEndpoint: "/macros.json",
		JsonName:    "macros",
		FileName:    "macro",
	},
	{
		FuncName:    "OrganizationFields",
		ObjectName:  "OrganizationField",
		ApiEndpoint: "/organization_fields.json",
		JsonName:    "organization_fields",
		FileName:    "organization_field",
	},
	{
		FuncName:    "OrganizationMemberships",
		ObjectName:  "OrganizationMembership",
		ApiEndpoint: "/organization_memberships.json",
		JsonName:    "organization_memberships",
		FileName:    "organization_membership",
	},
	{
		FuncName:    "Organizations",
		ObjectName:  "Organization",
		ApiEndpoint: "/organizations.json",
		JsonName:    "organizations",
		FileName:    "organization",
	},
	{
		FuncName:    "Search",
		ObjectName:  "SearchResults",
		ApiEndpoint: "/search.json",
		JsonName:    "results",
		FileName:    "search",
	},
	{
		FuncName:    "SLAPolicies",
		ObjectName:  "SLAPolicy",
		ApiEndpoint: "/slas/policies.json",
		JsonName:    "sla_policies",
		FileName:    "sla_policy",
	},
	{
		FuncName:    "AllTicketAudits",
		ObjectName:  "TicketAudit",
		ApiEndpoint: "/ticket_audits.json",
		JsonName:    "audits",
		FileName:    "all_ticket_audit",
	},
	{
		FuncName:    "TicketAudits",
		ObjectName:  "TicketAudit",
		ApiEndpoint: "/tickets/%d/audits.json",
		JsonName:    "audits",
		FileName:    "ticket_audit",
		ExtraParam:  true,
	},
	{
		FuncName:    "TicketFields",
		ObjectName:  "TicketField",
		ApiEndpoint: "/ticket_fields.json",
		JsonName:    "ticket_fields",
		FileName:    "ticket_field",
	},
	{
		FuncName:    "TicketForms",
		ObjectName:  "TicketForm",
		ApiEndpoint: "/ticket_forms.json",
		JsonName:    "ticket_forms",
		FileName:    "ticket_form",
	},
	{
		FuncName:    "Triggers",
		ObjectName:  "Trigger",
		ApiEndpoint: "/triggers.json",
		JsonName:    "triggers",
		FileName:    "trigger",
	},
	{
		FuncName:    "UserFields",
		ObjectName:  "UserField",
		ApiEndpoint: "/user_fields.json",
		JsonName:    "user_fields",
		FileName:    "user_field",
	},
	{
		FuncName:    "Users",
		ObjectName:  "User",
		ApiEndpoint: "/users.json",
		JsonName:    "users",
		FileName:    "user",
	},
	{
		FuncName:    "OrganizationUsers",
		ObjectName:  "User",
		ApiEndpoint: "/organizations/%d/users.json",
		JsonName:    "users",
		FileName:    "organization_users",
		ExtraParam:  true,
	},
	{
		FuncName:    "GroupUsers",
		ObjectName:  "User",
		ApiEndpoint: "/groups/%d/users.json",
		JsonName:    "users",
		FileName:    "group_users",
		ExtraParam:  true,
	},
	{
		FuncName:    "Views",
		ObjectName:  "View",
		ApiEndpoint: "/views.json",
		JsonName:    "views",
		FileName:    "view",
	},
	{
		FuncName:    "TicketsFromView",
		ObjectName:  "Ticket",
		ApiEndpoint: "/views/%d/tickets.json",
		JsonName:    "tickets",
		FileName:    "tickets_from_view",
		ExtraParam:  true,
	},
	{
		FuncName:    "Tickets",
		ObjectName:  "Ticket",
		ApiEndpoint: "/tickets.json",
		JsonName:    "tickets",
		FileName:    "ticket",
	},
	{
		FuncName:    "TicketComments",
		ObjectName:  "TicketComment",
		ApiEndpoint: "/tickets/%d/comments.json",
		JsonName:    "comments",
		FileName:    "ticket_comment",
		ExtraParam:  true,
	},
	{
		FuncName:    "Groups",
		ObjectName:  "Group",
		ApiEndpoint: "/groups.json",
		JsonName:    "groups",
		FileName:    "group",
	},
	{
		FuncName:    "OrganizationTickets",
		ObjectName:  "Ticket",
		ApiEndpoint: "/organizations/%d/tickets.json",
		JsonName:    "tickets",
		FileName:    "organization_tickets",
		ExtraParam:  true,
	},
}

func main() {

	tt := template.Must(template.New("func").Parse(tpl))

	for _, v := range funcData {
		dest := "zendesk/" + v.FileName + "_generated.go"
		file, err := os.Create(dest)
		if err != nil {
			panic(err)
		}
		defer file.Close()
		err = tt.Execute(file, v)
		if err != nil {
			panic(err)
		}
		fmt.Println("Generated " + dest + " successfully")
	}
}
